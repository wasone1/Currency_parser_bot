# handlers/user.py

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InputFile, FSInputFile
from db.queries import (
    add_subscriber, remove_subscriber, get_history, get_latest_rate, increment_command_stat, get_subscribers, get_all_stats
)
from utils.parsers import get_usd_nbu, get_eur_nbu, get_usd_privat, get_usd_mono, get_usd_minfin, get_gbp_nbu, get_pln_nbu
from utils.charts import create_chart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import ADMIN_ID

router = Router()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    increment_command_stat("start")
    if message.from_user:
        add_subscriber(message.from_user.id)
    await message.answer(
        "–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫—É—Ä—Å—É –≤–∞–ª—é—Ç üí∏\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/admin ‚Äî –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n"
        "/usd ‚Äî –∫—É—Ä—Å –¥–æ–ª–∞—Ä–∞\n"
        "/eur ‚Äî –∫—É—Ä—Å —î–≤—Ä–æ\n"
        "/compare ‚Äî –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—É—Ä—Å—ñ–≤\n"
        "/currency ‚Äî –≤–∏–±—ñ—Ä –≤–∞–ª—é—Ç–∏ —Ç–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—É—Ä—Å—ñ–≤\n"
        "/history ‚Äî —ñ—Å—Ç–æ—Ä—ñ—è –∫—É—Ä—Å—ñ–≤\n"
        "/chart ‚Äî –≥—Ä–∞—Ñ—ñ–∫\n"
        "/subscribe ‚Äî –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É\n"
        "/unsubscribe ‚Äî –≤—ñ–¥–ø–∏—Å–∫–∞"
    )

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    increment_command_stat("help")
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/admin ‚Äî –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n"
        "/usd ‚Äî –∫—É—Ä—Å –¥–æ–ª–∞—Ä–∞\n"
        "/eur ‚Äî –∫—É—Ä—Å —î–≤—Ä–æ\n"
        "/compare ‚Äî –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—É—Ä—Å—ñ–≤\n"
        "/currency ‚Äî –≤–∏–±—ñ—Ä –≤–∞–ª—é—Ç–∏ —Ç–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—É—Ä—Å—ñ–≤\n"
        "/history ‚Äî —ñ—Å—Ç–æ—Ä—ñ—è –∫—É—Ä—Å—ñ–≤\n"
        "/chart ‚Äî –≥—Ä–∞—Ñ—ñ–∫\n"
        "/subscribe ‚Äî –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É\n"
        "/unsubscribe ‚Äî –≤—ñ–¥–ø–∏—Å–∫–∞"
    )

@router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if not message.from_user or message.from_user.id != ADMIN_ID:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    subs = get_subscribers()
    stats = get_all_stats()
    text = f"üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å\n\n"
    text += f"–ü—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤: {len(subs)}\n\n"
    text += "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥:\n"
    for cmd, count in stats:
        text += f"/{cmd}: {count}\n"
    await message.answer(text)

@router.message(Command("usd"))
async def cmd_usd(message: types.Message):
    increment_command_stat("usd")
    rate, date = get_usd_nbu()  # –ü–∞—Ä—Å–∏–º–æ –∫—É—Ä—Å —ñ –æ–¥—Ä–∞–∑—É –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
    if rate:
        await message.answer(f"–ö—É—Ä—Å USD (–ù–ë–£): {rate} –≥—Ä–Ω\n–î–∞—Ç–∞: {date}")
    else:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å USD.")

@router.message(Command("eur"))
async def cmd_eur(message: types.Message):
    increment_command_stat("eur")
    rate, date = get_eur_nbu()
    if rate:
        await message.answer(f"–ö—É—Ä—Å EUR (–ù–ë–£): {rate} –≥—Ä–Ω\n–î–∞—Ç–∞: {date}")
    else:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å EUR.")

@router.message(Command("compare"))
async def cmd_compare(message: types.Message):
    increment_command_stat("compare")
    nbu, _ = get_usd_nbu()
    privat, _ = get_usd_privat()
    mono, _ = get_usd_mono()
    minfin, _ = get_usd_minfin()

    text = "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—É—Ä—Å—É USD:\n"
    text += f"–ù–ë–£: {nbu if nbu else '–Ω/–¥'} –≥—Ä–Ω\n"
    text += f"–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫: {privat if privat else '–Ω/–¥'} –≥—Ä–Ω\n"
    text += f"–ú–æ–Ω–æ–±–∞–Ω–∫: {mono if mono else '–Ω/–¥'} –≥—Ä–Ω\n"
    text += f"–ú—ñ–Ω—Ñ—ñ–Ω: {minfin if minfin else '–Ω/–¥'} –≥—Ä–Ω\n"

    await message.answer(text)

@router.message(Command("currency"))
async def cmd_currency(message: types.Message):
    increment_command_stat("currency")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="USD"), KeyboardButton(text="EUR")],
            [KeyboardButton(text="PLN"), KeyboardButton(text="BTC")],
            [KeyboardButton(text="GBP")],
		  ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:", reply_markup=keyboard)

@router.message(Command("history"))
async def cmd_history(message: types.Message):
    increment_command_stat("history")
    history = get_history("USD", "NBU", days=7)
    if history:
        text = "–Ü—Å—Ç–æ—Ä—ñ—è –∫—É—Ä—Å—É USD (–ù–ë–£):\n"
        text += "\n".join([f"{date}: {rate} –≥—Ä–Ω" for date, rate in history])
        await message.answer(text)
    else:
        await message.answer("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")

@router.message(Command("subscribe"))
async def cmd_subscribe(message: types.Message):
    increment_command_stat("subscribe")
    if message.from_user:
        add_subscriber(message.from_user.id)
    await message.answer("–í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –∫—É—Ä—Å—É!")

@router.message(Command("unsubscribe"))
async def cmd_unsubscribe(message: types.Message):
    increment_command_stat("unsubscribe")
    if message.from_user:
        remove_subscriber(message.from_user.id)
    await message.answer("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–∫–∏.")

@router.message(Command("chart"))
async def cmd_chart(message: types.Message):
    increment_command_stat("chart")
    history = get_history("USD", "NBU", days=7)
    if not history:
        await message.answer("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
        return
    file_path = create_chart(history)
    input_file = FSInputFile(file_path)
    await message.answer_photo(input_file, caption="–ì—Ä–∞—Ñ—ñ–∫ –∫—É—Ä—Å—É USD (–ù–ë–£) –∑–∞ 7 –¥–Ω—ñ–≤")

@router.message()
async def handle_currency_choice(message: types.Message):
    currency = message.text.upper()
    if currency not in ["USD", "EUR", "PLN", "BTC", "GBP"]:
        return  # –Ü–≥–Ω–æ—Ä—É—î–º–æ —ñ–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    # –ü–∞—Ä—Å–∏–º–æ –∫—É—Ä—Å –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª (–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è USD/EUR)
    if currency == "USD":
        nbu, _ = get_usd_nbu()
        privat, _ = get_usd_privat()
        mono, _ = get_usd_mono()
        minfin, _ = get_usd_minfin()
        text = "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—É—Ä—Å—É USD:\n"
        text += f"–ù–ë–£: {nbu if nbu else '–Ω/–¥'} –≥—Ä–Ω\n"
        text += f"–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫: {privat if privat else '–Ω/–¥'} –≥—Ä–Ω\n"
        text += f"–ú–æ–Ω–æ–±–∞–Ω–∫: {mono if mono else '–Ω/–¥'} –≥—Ä–Ω\n"
        text += f"–ú—ñ–Ω—Ñ—ñ–Ω: {minfin if minfin else '–Ω/–¥'} –≥—Ä–Ω\n"
    elif currency == "EUR":
        # –î–æ–¥–∞–π –∞–Ω–∞–ª–æ–≥—ñ—á–Ω—ñ –ø–∞—Ä—Å–µ—Ä–∏ –¥–ª—è EUR (get_eur_nbu, get_eur_privat, ...)
        text = "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—É—Ä—Å—É EUR:\n(—Ä–µ–∞–ª—ñ–∑—É–π –ø–∞—Ä—Å–µ—Ä–∏ –¥–ª—è EUR)"
    elif currency == "PLN":
        nbu, _ = get_pln_nbu()
        text = f"–ö—É—Ä—Å PLN (–ù–ë–£): {nbu if nbu else '–Ω/–¥'} –≥—Ä–Ω\n"
    elif currency == "BTC":
        text = "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—É—Ä—Å—É BTC:\n(—Ä–µ–∞–ª—ñ–∑—É–π –ø–∞—Ä—Å–µ—Ä–∏ –¥–ª—è BTC)"
    elif currency == "GBP":
        nbu, _ = get_gbp_nbu()
        text = f"–ö—É—Ä—Å GBP (–ù–ë–£): {nbu if nbu else '–Ω/–¥'} –≥—Ä–Ω\n"
    else:
        text = "–ù–µ–≤—ñ–¥–æ–º–∞ –≤–∞–ª—é—Ç–∞."

    await message.answer(text)